{"NM":"前端 MVVM 框架简单实现 1","CTS":[{"NT":"h","CT":"前端 MVVM 框架简单实现 1","CL":"#333"},{"NT":"p","CT":"本文主要介绍了 MVVM 的概念及 MVVM 的底层原理。","CL":"#333"},{"NT":"p","CT":"让我们先来看这样一段 Vue.js 的示例代码：","CL":"#333"},{"NT":"code","LG":"javascript","CT":"import { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')"},{"NT":"code","LG":"xml","CT":"&lt;div id=\"app\"&gt;\n  &lt;button @click=\"count++\"&gt;\n    Count is: {{ count }}\n  &lt;/button&gt;\n&lt;/div&gt;"},{"NT":"link","SRC":"https://cn.vuejs.org/guide/introduction.html#what-is-vue:~:text=%3C/div%3E-,%E7%BB%93%E6%9E%9C%E5%B1%95%E7%A4%BA,-Count%20is%3A%200","CT":"你也可以访问此链接查看效果","CL":"#333"},{"NT":"p","CT":"我们可以看到，上述的代码中，没有出现任何的 DOM 操作的代码，app 组件的``count``属性被修改后便自动更新到界面上，而 DOM 操作则全由框架本身执行。框架的作用就是监听变量的变化，存储 DOM 元素使用的变量并当变量发生改变时作用到 DOM 元素上，使 DOM 元素对应的属性同时发生改变。","CL":"#333"},{"NT":"hr"},{"NT":"p","CT":"接下来介绍 MVVM 的底层原理。","CL":"#333"},{"NT":"p","CT":"在 ES6 中，新增了 Proxy 类，可以用于监听对象的变化。","CL":"#333"},{"NT":"p","CT":"利用 Proxy 类，我们可以写出如下代码：","CL":"#333"},{"NT":"code","LG":"xml","CT":"&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Basic Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p id=\"target\"&gt;&lt;/p&gt;\n\n    &lt;script src=\"./index.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;"},{"NT":"code","LG":"javascript","CT":"const __component = {\n    el: document.getElementById(\"target\"),\n    data: \"\"\n}\n\n// 此部分为核心代码\nconst component = new Proxy(__component, {\n    set(target, key, newVal) {\n        if (key === \"data\") {\n            // 当 data 属性被修改时,\n            // 修改目标元素的对应属性\n            target.el.innerText = newVal\n        }\n        Reflect.set(target, key, newVal)\n    }\n})\n\nsetTimeout(() =&gt; {\n    // 实际触发界面变化的代码\n    component.data = \"test content\"\n}, 2000)"},{"NT":"p","CT":"看起来似乎很繁琐，对吧？但事实上，中间的“核心代码”对应的就是 MVVM 框架的作用。而我们的目标，就是实现通过类似如下的代码来达到目的效果。","CL":"#333"},{"NT":"code","LG":"javascript","CT":"const component = {\n    el: document.getElementById(\"target\"),\n    data: \"\"\n}\n// 通过此代码更改元素的某个属性\ncomponent.data = \"test content\"\n"}]}