{"NM":"doesNotReject 函数","CTS":[{"NT":"h","CT":"assert.doesNotReject 函数","CL":"#333"},{"NT":"p","CT":"assert.doesNotReject(asyncFn[, error][, message])","CL":"#333"},{"NT":"p","CT":"于 v10.0.0 版本添加。","CL":"#333"},{"NT":"list","CTS":[{"NT":"li","CT":"``asyncFn``:Function / Promise","CL":"#333"},{"NT":"li","CT":"``error``:RegExp / Function","CL":"#333"},{"NT":"li","CT":"``message``:string","CL":"#333"}],"OL":false},{"NT":"p","CT":"等待``asyncFn``promise 结束。如果``asyncFn``是一个函数，则会立即调用该函数并等待其返回的 promise 完成。然后便会检测该 promise 是否出错。","CL":"#333"},{"NT":"p","CT":"如果``asyncFn``是一个函数并且同步地抛出错误，则``assert.doesNotReject()``会返回一个被拒绝的 promise 请求同时报错。如果``asyncFn``是一个函数且没有返回一个 promise，则``assert.doesNotReject()``会返回一个被拒绝的 promise 对象，同时抛出一个``ERR_INVALID_RETURN_VALUE``(返回值不合法)错误。在其它情况下则不会报错。","CL":"#333"},{"NT":"p","CT":"``assert.doesNotReject()``其实也不是很有用，因为这个方法实际上会在一个 promise 抛出 reject 被捕捉后又抛出 reject 。作为替代，你可以在特定的不应返回 reject 的 promise 后加上注释声明，并且尽量让错误提示更具表现力(expressive)。","CL":"#333"},{"NT":"p","CT":"如果没有被指定，参数``error``的类型可以是``Object``，``RegExp``或一个有效的函数。你可以查看``assert.throws()``以获取更多信息。","CL":"#333"},{"NT":"p","CT":"此外，此方法等待 promise 完成的行为与``assert.doesNotThrow()``相似。","CL":"#333"},{"NT":"floor","CTS":[{"NT":"h","CT":"示例代码","CL":"#333"},{"NT":"code","LG":"javascript","CT":"import assert from 'node:assert/strict';\n\nawait assert.doesNotReject(\n  async () =&gt; {\n    throw new TypeError('Wrong value');\n  },\n  SyntaxError\n);\nimport assert from 'node:assert/strict';\n\nassert.doesNotReject(\n  Promise.reject(\n    new TypeError('Wrong value')\n  ))\n  .then(() =&gt; {\n    // ...\n});"}]}]}