{"NM":"rejects 函数","CTS":[{"NT":"h","CT":"assert.rejects 函数","CL":"#333"},{"NT":"p","CT":"assert.rejects(asyncFn[, error][, message])","CL":"#333"},{"NT":"p","CT":"于 v10.0.0 版本被添加。","CL":"#333"},{"NT":"list","CTS":[{"NT":"li","CT":"``asyncFn``:Function / Promise","CL":"#333"},{"NT":"li","CT":"``error``:RegExp / Function / Object / Error","CL":"#333"},{"NT":"li","CT":"``message``:string","CL":"#333"}],"OL":false},{"NT":"p","CT":"如果 asyncFn 是一个 Promise，此方法会等待该 Promise 完成，\n如果 asyncFn 是一个函数，此方法会立即调用该函数并且等待其返回的 Promise 完成。然后此方法会检查该 Promise 是否为 rejected 状态。","CL":"#333"},{"NT":"p","CT":"如果 asyncFn 是一个函数并且同步地抛出一个错误，此方法会返回一个 rejected 状态的带有该错误的 Promise。如果 asyncFn 没有返回 Promise，此方法会返回一个 rejected 状态的 Promise 带有``ERR_INVALID_RETURN_VALUE``的错误。在上面两个例子中错误处理会被略过。","CL":"#333"},{"NT":"p","CT":"此外，此方法等待异步等待 Promise 完成的行为与``assert.throws()``相同。","CL":"#333"},{"NT":"p","CT":"如果未被指定，error 参数的类型可以是一个类、正则表达式、一个有效的函数、每个属性都会被检测的对象或者一个每个属性都会被检测(包括 name 和 message)的 error 实例。","CL":"#333"},{"NT":"p","CT":"如果 asyncFn 没有返回 rejected 状态的 Promise，message 会被设为``AssertionError``默认的 message (如果 message 未被指定的话)。","CL":"#333"},{"NT":"code","LG":"javascript","CT":"import assert from 'node:assert/strict';\n\nawait assert.rejects(\n  async () =&gt; {\n    throw new TypeError('Wrong value');\n  },\n  {\n    name: 'TypeError',\n    message: 'Wrong value'\n  }\n);"},{"NT":"code","LG":"javascript","CT":"import assert from 'node:assert/strict';\n\nawait assert.rejects(\n  async () =&gt; {\n    throw new TypeError('Wrong value');\n  },\n  (err) =&gt; {\n    assert.strictEqual(err.name, 'TypeError');\n    assert.strictEqual(err.message, 'Wrong value');\n    return true;\n  }\n);"},{"NT":"code","LG":"javascript","CT":"import assert from 'node:assert/strict';\n\nassert.rejects(\n  Promise.reject(new Error('Wrong value')),\n  Error\n).then(() =&gt; {\n  // ...\n});"},{"NT":"p","CT":"此方法的 error 属性不能为字符串类型。如果有字符串被传入作为此方法的第二个参数，则 error 会被认为是被省略了，而该字符串会被用作 message 参数。这会导致易被忽略的错误。如果你想使用字符串作为第二个参数，请认真阅读``assert.throws()``的示例。","CL":"#333"}]}