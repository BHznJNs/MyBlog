{"NM":"doesNotMatch 函数","CTS":[{"NT":"h","CT":"assert.doesNotMatch 函数","CL":"#333"},{"NT":"p","CT":"assert.doesNotMatch(string, regexp[, message])","CL":"#333"},{"NT":"floor","CTS":[{"NT":"h","CT":"历史变更","CL":"#333"},{"NT":"table","CTS":[["版本","改变"],["v16.0.0","此 API 不再为实验性。"],["v13.6.0, v12.16.0","于 v13.6.0, v12.16.0 版本添加。"]]}]},{"NT":"list","CTS":[{"NT":"li","CT":"``string``:string","CL":"#333"},{"NT":"li","CT":"``regexp``:RegExp","CL":"#333"},{"NT":"li","CT":"``message``:string / Error","CL":"#333"}],"OL":false},{"NT":"p","CT":"判断输入的字符串是否不满足输入的正则表达式(若满足则报错)。","CL":"#333"},{"NT":"code","LG":"javascript","CT":"import assert from 'node:assert/strict';\n\nassert.doesNotMatch('I will fail', /fail/);\n// AssertionError [ERR_ASSERTION]: The input was expected to not match the ...\n\nassert.doesNotMatch(123, /pass/);\n// AssertionError [ERR_ASSERTION]: The \"string\" argument must be of type string.\n\nassert.doesNotMatch('I will pass', /different/);\n// 无报错。"},{"NT":"p","CT":"如果正则表达式能够匹配，或``string``参数的输入不是``string``类型，则程序会抛出一个``message``属性与输入的``message``参数相同的``AssertionError``错误。如果没有传入``message``参数，则会使用默认的错误信息。如果传入的``message``参数是一个``Error``实例，作为``AssertionError``的替代，会直接抛出该实例。","CL":"#333"}]}