{"NM":"match 函数","CTS":[{"NT":"h","CT":"assert.match 函数","CL":"#333"},{"NT":"p","CT":"assert.match(string, regexp[, message])","CL":"#333"},{"NT":"floor","CTS":[{"NT":"h","CT":"历史变更","CL":"#333"},{"NT":"table","CTS":[["版本","改变"],["v16.0.0","此方法不再是实验性。"],["v13.6.0, v12.16.0","于 v13.6.0, v12.16.0 版本被添加。"]]}]},{"NT":"list","CTS":[{"NT":"li","CT":"``string``:string","CL":"#333"},{"NT":"li","CT":"``regexp``:RegExp","CL":"#333"},{"NT":"li","CT":"``message``:string / Error","CL":"#333"}],"OL":false},{"NT":"p","CT":"检测输入的字符串是否匹配输入的正则表达式(不匹配则报错)。","CL":"#333"},{"NT":"code","LG":"javascript","CT":"assert.match('I will fail', /pass/);\n// AssertionError [ERR_ASSERTION]:\n// The input did not match the regular ...\n\nassert.match(123, /pass/);\n// AssertionError [ERR_ASSERTION]:\n// The \"string\" argument must be of type string.\n\nassert.match('I will pass', /pass/);\n// 无报错。"},{"NT":"p","CT":"如果不匹配，或者``string``参数不是 string 类型，则一个带有 message 属性(其值与方法输入的 message 参数相同)的``AssertionError``会被抛出。如果 message 参数是一个 undefined，则会使用默认的错误信息。如果 message 参数 是一个 Error 实例，则该实例会代替``AssertionError``被抛出。","CL":"#333"}]}