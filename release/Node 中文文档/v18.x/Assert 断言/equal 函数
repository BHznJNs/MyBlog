{"NM":"equal 函数","CTS":[{"NT":"h","CT":"assert.equal 函数","CL":"#333"},{"NT":"p","CT":"assert.equal(actual, expected[, message])","CL":"#333"},{"NT":"floor","CTS":[{"NT":"h","CT":"历史变更","CL":"#333"},{"NT":"table","CTS":[["版本","改变"],["v16.0.0, v14.18.0","在旧版 assert 模式中，将该方法的稳定性从被废弃(Deprecated)改为遗留的(Legacy)。"],["v14.0.0","当被比较的两边的值都为 NaN 时，会被认为是相等的。"],["v0.1.21","于 v0.1.21 版本被添加。"]]}]},{"NT":"list","CTS":[{"NT":"li","CT":"``actual``:any","CL":"#333"},{"NT":"li","CT":"``expected``:any ","CL":"#333"},{"NT":"li","CT":"``message``:string / Error ","CL":"#333"}],"OL":false},{"NT":"floor","CTS":[{"NT":"h","CT":"严格 assert 模式下","CL":"#333"},{"NT":"p","CT":"作为``assert.strictEqual()``的别称。","CL":"#333"}]},{"NT":"floor","CTS":[{"NT":"h","CT":"旧版 assert 模式下","CL":"#333"},{"NT":"p","CT":"稳定性：遗留的(Legacy) -- 建议使用``assert.strictEqual()``作为替代。","CL":"#00f"},{"NT":"p","CT":"使用``==``运算符，进行粗浅的比较。NaN 会被特殊处理，当两边都为 NaN 时，会被认为是相等的。","CL":"#333"},{"NT":"code","LG":"javascript","CT":"import assert from 'node:assert';\n\nassert.equal(1, 1);\n// OK, 1 == 1\nassert.equal(1, '1');\n// OK, 1 == '1'\nassert.equal(NaN, NaN);\n// OK\n\nassert.equal(1, 2);\n// AssertionError: 1 == 2\nassert.equal({ a: { b: 1 } }, { a: { b: 1 } });\n// AssertionError: { a: { b: 1 } } == { a: { b: 1 } }\n"},{"NT":"p","CT":"如果两边的值不相等，则会抛出一个带有 message 属性(其值与方法输入的 message 相同)的``AssertionError``错误。若方法输入的 messsage 参数为 undefined，则程序会自动生成错误信息。如果 message 参数是一个``Error``实例，则该实例会代替``AssertionError``被抛出。","CL":"#333"}]}]}