{"NM":"ifError 函数","CTS":[{"NT":"h","CT":"assert.ifError 函数","CL":"#333"},{"NT":"p","CT":"assert.ifError(value)","CL":"#333"},{"NT":"floor","CTS":[{"NT":"h","CT":"历史变更","CL":"#333"},{"NT":"table","CTS":[["版本","改变"],["v10.0.0","它现在的报错使用包含了完整堆栈追踪信息的 AssertionError 进行封装，以取代之前使用的原生 error。"],["v10.0.0","现在只有当 value 的值不为 undefined 或 null 时才会报错，在之前的版本，所有的虚值的传入都不会引发错误。"],["v0.1.97","于 v0.1.97 版本被添加。"]]}]},{"NT":"list","CTS":[{"NT":"li","CT":"``value``:any","CL":"#333"}],"OL":false},{"NT":"p","CT":"当参数``value``的值不是 undefined 或 null 时，抛出错误。当你在测试回调函数的 error 参数时，这是很有用的。此方法的堆栈追踪包含着从该错误传到此方法的所有帧，包括对于此方法自身的潜在新帧。","CL":"#333"},{"NT":"code","LG":"javascript","CT":"import assert from 'node:assert/strict';\n\nassert.ifError(null);\n// 无报错。\nassert.ifError(0);\n// AssertionError [ERR_ASSERTION]:\n// ifError got unwanted exception: 0\nassert.ifError('error');\n// AssertionError [ERR_ASSERTION]:\n// ifError got unwanted exception: 'error'\nassert.ifError(new Error());\n// AssertionError [ERR_ASSERTION]:\n// ifError got unwanted exception: Error\n\n// 创建一个错误帧。\nlet err;\n(function errorFrame() {\n  err = new Error('test error');\n})();\n// 将错误传入 ifError\n(function ifErrorFrame() {\n  assert.ifError(err);\n})();\n// AssertionError [ERR_ASSERTION]:\n// ifError got unwanted exception: test error\n//     at ifErrorFrame\n//     at errorFrame"}]}