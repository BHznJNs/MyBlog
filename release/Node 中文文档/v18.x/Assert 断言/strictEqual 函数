{"NM":"strictEqual 函数","CTS":[{"NT":"h","CT":"assert.strictEqual 函数","CL":"#333"},{"NT":"p","CT":"assert.strictEqual(actual, expected[, message])","CL":"#333"},{"NT":"floor","CTS":[{"NT":"h","CT":"变更历史","CL":"#333"},{"NT":"table","CTS":[["版本","改变"],["v10.0.0","从使用严格比较改为使用 Object.is()。"],["v0.1.21","于 v0.1.21 版本被添加。"]]}]},{"NT":"list","CTS":[{"NT":"li","CT":"``actual``:any","CL":"#333"},{"NT":"li","CT":"``expected``:any","CL":"#333"},{"NT":"li","CT":"``message``:string / Error","CL":"#333"}],"OL":false},{"NT":"p","CT":"使用``Object.is()``判断 actual 和 expected 两个参数是否相等。","CL":"#333"},{"NT":"code","LG":"javascript","CT":"import assert from 'node:assert/strict';\n\nassert.strictEqual(1, 2);\n// AssertionError [ERR_ASSERTION]:\n// Expected inputs to be strictly equal:\n//\n// 1 !== 2\n\nassert.strictEqual(1, 1);\n// 无报错。\n\nassert.strictEqual('Hello foobar', 'Hello World!');\n// AssertionError [ERR_ASSERTION]:\n// Expected inputs to be strictly equal:\n// + actual - expected\n//\n// + 'Hello foobar'\n// - 'Hello World!'\n//          ^\n\nconst apples = 1;\nconst oranges = 2;\nassert.strictEqual(\n    apples, oranges,\n    `apples ${apples} !== oranges ${oranges}`\n);\n// AssertionError [ERR_ASSERTION]:\n// apples 1 !== oranges 2\n\nassert.strictEqual(\n    1, '1',\n    new TypeError('Inputs are not identical')\n);\n// TypeError: Inputs are not identical"},{"NT":"p","CT":"如果输入的值不是严格相等，则抛出一个带有 message 属性(其值与此方法输入的 message 参数的值相同)的``AssertionError``。如果 message 参数的值为 undefined，则抛出的错误信息会被设为默认信息。如果 message 是一个``Error``实例，其实例会代替``AssertionError``被抛出。","CL":"#333"}]}