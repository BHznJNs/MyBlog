{"NM":"AssertionError 类","CTS":[{"NT":"h","CT":"assert.AssertionError 类","CL":"#333"},{"NT":"p","CT":"继承自：","CL":"#333"},{"NT":"p","CT":"表明一个断言方法的错误。所有由``node:assert``模块抛出的错误都是 AssertError 类的实例。","CL":"#333"},{"NT":"floor","CTS":[{"NT":"h","CT":"new assert.AssertionError(options)","CL":"#333"},{"NT":"p","CT":"于 v0.1.21 版本被添加。","CL":"#333"},{"NT":"list","CTS":[{"NT":"li","CT":"``options``:object","CL":"#333"},{"NT":"list","OL":false,"CTS":[{"NT":"li","CT":"``message``:string | 若被提供，则被显示在错误消息中。","CL":"#333"},{"NT":"li","CT":"``actual``:any | error 实例中的 actual 属性。","CL":"#333"},{"NT":"li","CT":"``expected``:any | error 实例中的 expected 属性。","CL":"#333"},{"NT":"li","CT":"``operator``:string | error 实例中的 operator 属性。","CL":"#333"},{"NT":"li","CT":"``stackStartFn``:function | 若被提供，则被生成的堆栈轨迹将省略此函数前的帧。","CL":"#333"}]}],"OL":false},{"NT":"p","CT":"error 的子类，表明一个断言方法的错误。","CL":"#333"},{"NT":"p","CT":"所有实例都包含内置的``Error``的属性(``message``和``name``)还有：","CL":"#333"},{"NT":"list","CTS":[{"NT":"li","CT":"``actual``:any | 由``assert.strictEqual()``等方法传入的 actual 参数。","CL":"#333"},{"NT":"li","CT":"``expected``:any | 由``assert.strictEqual()``等方法传入的 expected 参数。","CL":"#333"},{"NT":"li","CT":"``generateMessage``:boolean | 表明 message 是否为自动生成。","CL":"#333"},{"NT":"li","CT":"``code``:string | 为表明此错误是一个 assertion 错误，值总是``ERR_ASSERTION``。","CL":"#333"},{"NT":"li","CT":"``operator``:string | 被传入的``operator``值。","CL":"#333"}],"OL":false}]},{"NT":"floor","CTS":[{"NT":"h","CT":"示例代码","CL":"#333"},{"NT":"code","LG":"javascript","CT":"import assert from \"node:assert\";\n\n// 生成一个 AssertionError 实例来比较错误信息：\n// const { message } = new assert.AssertionError({\n  actual: 1,\n  expected: 2,\n  operator: 'strictEqual'\n});\n\n// 验证错误输出：\ntry {\n  assert.strictEqual(1, 2);\n} catch (err) {\n  assert(err instanceof assert.AssertionError);\n  assert.strictEqual(err.message, message);\n  assert.strictEqual(err.name, 'AssertionError');\n  assert.strictEqual(err.actual, 1);\n  assert.strictEqual(err.expected, 2);\n  assert.strictEqual(err.code, 'ERR_ASSERTION');\n  assert.strictEqual(err.operator, 'strictEqual');\n  assert.strictEqual(err.generatedMessage, true);\n}\n"}]}]}