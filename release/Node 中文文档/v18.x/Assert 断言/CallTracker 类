{"NM":"CallTracker 类","CTS":[{"NT":"h","CT":"assert.CallTracker 类","CL":"#333"},{"NT":"p","CT":"添加于：v14.2.0, v12.19.0","CL":"#333"},{"NT":"p","CT":"稳定性：实验性(Experimental)","CL":"#333"},{"NT":"p","CT":"此特性现为实验性功能，其行为将来有可能会被改变。","CL":"#333"},{"NT":"floor","CTS":[{"NT":"h","CT":"new assert.CallTracker()","CL":"#333"},{"NT":"p","CT":"添加于：v14.2.0, v12.19.0","CL":"#333"},{"NT":"p","CT":"构造一个可用于追踪一个函数是否被调用指定次数的``CallTracker``对象。``tracker.verify()``方法必须被调用来进行验证。你通常可以在``process.on('exit')``的回调函数中调用它。","CL":"#333"},{"NT":"code","LG":"javascript","CT":"import assert from 'node:assert';\nimport process from 'node:process';\n\nconst tracker = new assert.CallTracker();\n\nfunction func() {}\n\n// 在 tracker.verify() 之前，callsfunc()\n// 必须有且仅被调用一次。\nconst callsfunc = tracker.calls(func, 1);\n\ncallsfunc();\n\n// 调用 tracker.verify() 以监测是否所有的 tracker.calls()\n// 方法都被调用预期的次数。\nprocess.on('exit', () =&gt; {\n  tracker.verify();\n});"}]},{"NT":"floor","CTS":[{"NT":"h","CT":"tracker.calls([fn][, exact])","CL":"#333"},{"NT":"p","CT":"添加于：v14.2.0, v12.19.0","CL":"#333"},{"NT":"list","CTS":[{"NT":"li","CT":"``fn``:Function | 默认：无操作函数。","CL":"#333"},{"NT":"li","CT":"``exact``:number | 默认：1。","CL":"#333"},{"NT":"li","CT":"``Returns``:Function | 封装了``fn``的函数。","CL":"#333"}],"OL":false},{"NT":"p","CT":"返回的封装函数被预期调用``exact``次数。当``tracker.verify()``被调用时，若封装函数被调用次数超过或不足预期次数，则会抛出错误。","CL":"#333"},{"NT":"code","LG":"javascript","CT":"import assert from 'node:assert';\n\n// 构造 call tracker 实例.\nconst tracker = new assert.CallTracker();\n\nfunction func() {}\n\n// 返回一个封装了 func() 的函数，你在调用 tracker.verify()\n// 之前，必须调用这个函数足够次数，否则 tracker.verify() 将\n// 抛出错误。\nconst callsfunc = tracker.calls(func);"}]},{"NT":"floor","CTS":[{"NT":"h","CT":"tracker.report()","CL":"#333"},{"NT":"p","CT":"新增于：v14.2.0, v12.19.0","CL":"#333"},{"NT":"list","CTS":[{"NT":"li","CT":"``Returns``:Array | 返回一个对象数组，其中对象包含``tracker.calls()``返回的封装函数的信息。","CL":"#333"},{"NT":"li","CT":"``Object``:Object","CL":"#333"},{"NT":"list","OL":false,"CTS":[{"NT":"li","CT":"``message``:string","CL":"#333"},{"NT":"li","CT":"``actual``:number | 封装函数被实际调用的次数。","CL":"#333"},{"NT":"li","CT":"``expected``:number| 封装函数被预期的次数。","CL":"#333"},{"NT":"li","CT":"``operator``:string | 被封装函数的名字。","CL":"#333"},{"NT":"li","CT":"``stack``:Object | 封装函数的栈跟踪信息。","CL":"#333"}]}],"OL":false},{"NT":"code","LG":"javascript","CT":"import assert from 'node:assert';\n\n// 构造 call tracker 实例。\nconst tracker = new assert.CallTracker();\n\nfunction func() {}\n\nfunction foo() {}\n\n// 返回一个封装了 func() 的函数，你在调用 tracker.verify()\n// 之前，必须调用这个函数足够次数。\nconst callsfunc = tracker.calls(func, 2);\n\n// 返回一个包含关于 callsfunc() 信息的数组\ntracker.report();\n// [\n//  {\n//    message: 'Expected the func function to be executed 2 time(s) but was\n//    executed 0 time(s).',\n//    actual: 0,\n//    expected: 2,\n//    operator: 'func',\n//    stack: stack trace\n//  }\n// ]"}]},{"NT":"floor","CTS":[{"NT":"h","CT":"tracker.verify()","CL":"#333"},{"NT":"p","CT":"新增于：v14.2.0, v12.19.0","CL":"#333"},{"NT":"p","CT":"迭代传给``tracker.calls()``的函数的列表，对于没有被调用预期次数的函数会抛出错误。","CL":"#333"},{"NT":"code","LG":"javascript","CT":"import assert from 'node:assert';\n\n// 构造 call tracker 实例。\nconst tracker = new assert.CallTracker();\n\nfunction func() {}\n\n// 返回一个封装了 func() 的函数，你在调用 tracker.verify()\n// 之前，必须调用这个函数足够次数。\nconst callsfunc = tracker.calls(func, 2);\n\ncallsfunc();\n\n// 会抛出一个错误，因为 callsfunc() 只被调用了一次。\ntracker.verify();"}]}]}