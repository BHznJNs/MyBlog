{"NM":"doesNotThrow 函数","CTS":[{"NT":"h","CT":"assert.doesNotThrow 函数","CL":"#333"},{"NT":"p","CT":"assert.doesNotThrow(fn[, error][, message])","CL":"#333"},{"NT":"floor","CTS":[{"NT":"h","CT":"历史变更","CL":"#333"},{"NT":"table","CTS":[["版本","改变"],["v5.11.0, v4.4.5","message 参数现在受到重视了。"],["v4.2.0","error 参数现在可以是一个箭头函数。"],["v0.1.21","于 v0.1.21 版本添加。"]]}]},{"NT":"list","CTS":[{"NT":"li","CT":"``fn``:Function","CL":"#333"},{"NT":"li","CT":"``error``:RegExp / Function ","CL":"#333"},{"NT":"li","CT":"``message``:string","CL":"#333"}],"OL":false},{"NT":"p","CT":"判断输入的函数``fn``是否抛出错误。","CL":"#333"},{"NT":"p","CT":"``assert.doesNotThrow()``其实并没有多大用处，因为它实际上是在捕捉一个错误后重新将其抛出，这并没有多少好处。作为替代，你可以在特定代码行后添加注释标识那里不应抛出错误，并且尽量让错误提示更具表现力(expressive)。","CL":"#333"},{"NT":"p","CT":"当``assert.doesNotThrow()``被调用，它会立即调用``fn``。","CL":"#333"},{"NT":"p","CT":"当一个错误被抛出，并且它的类型与``error``参数指定的相同，一个``AssertionError``便会被抛出。如果抛出的错误是不同的类型，或者参数``error``是一个 undefined，此 错误便会传播回调用者。","CL":"#333"},{"NT":"p","CT":"如果未被指定，``error``的类型可以是一个类、正则表达式或是一个有效的函数。你可以查看``assert.throws()``以获取更多信息。","CL":"#333"},{"NT":"p","CT":"举例来说，下面这段代码会抛出一个``TypeError``因为错误类型没有被正则匹配到。","CL":"#333"},{"NT":"code","LG":"javascript","CT":"import assert from 'node:assert/strict';\n\nassert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError('Wrong value');\n  },\n  SyntaxError\n);"},{"NT":"p","CT":"但是，下面这段代码会引起一个带有 message('Got unwanted exception...')的``AssertionError``。","CL":"#333"},{"NT":"code","LG":"javascript","CT":"import assert from 'node:assert/strict';\n\nassert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError('Wrong value');\n  },\n  TypeError\n);"},{"NT":"p","CT":"如果有一个``AssertionError``被抛出，并且``message``参数不是一个 undefined，``message``的值会被添加到``AssertionError``的 message 中。","CL":"#333"},{"NT":"code","LG":"javascript","CT":"import assert from 'node:assert/strict';\n\nassert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError('Wrong value');\n  },\n  /Wrong value/,\n  'Whoops' // message\n);\n// Throws: AssertionError: Got unwanted exception: Whoops"}]}