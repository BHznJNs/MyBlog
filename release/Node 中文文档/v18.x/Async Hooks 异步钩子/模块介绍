{"NM":"模块介绍","CTS":[{"NT":"h","CT":"Async Hooks 异步钩子模块介绍","CL":"#333"},{"NT":"p","CT":"稳定性：实验性(Experimental)","CL":"#CA5010"},{"NT":"link","HF":"https://github.com/nodejs/node/blob/v18.7.0/lib/async_hooks.js","CT":"源代码：lib/async_hooks.js","CL":"#333"},{"NT":"p","CT":"此模块提供了用于追踪异步资源的 API 。你可以这样来加载此模块： ","CL":"#333"},{"NT":"code","LG":"javascript","CT":"// cjs\nconst async_hooks = require('node:async_hooks');\n// esm\nimport async_hooks from 'node:async_hooks';"},{"NT":"floor","CTS":[{"NT":"h","CT":"模块术语","CL":"#333"},{"NT":"p","CT":"一个异步资源(asynchronous resource)表示一个带有回调函数的对象。这个回调函数可能会被调用多次，例如``net.createServer()``的 connection 事件；也可能只被调用一次，就像在``fs.open()``中。一个 resourse 也可以在回调函数被调用之前被关闭。AsyncHook 不会仔细区分这些不同的情况，而是把它们视作作为 resourse 的抽象概念。","CL":"#333"},{"NT":"p","CT":"如果 Worker 被使用，则每一个线程都会有一个独立的 async_hooks 接口，并且每一个线程都会有一个新的 async ID 集合。","CL":"#333"}]},{"NT":"floor","CTS":[{"NT":"h","CT":"模块概览","CL":"#333"},{"NT":"p","CT":"下面的代码是一个对此模块的简单概览。","CL":"#333"},{"NT":"code","LG":"javascript","CT":"import async_hooks from 'node:async_hooks';\n\n\n// 返回当前执行上下文的 ID 。\nconst eid = async_hooks.executionAsyncId();\n\n// 返回与触发当前执行作用域的回调函数\n// 有关的句柄(handle)的 ID 。\nconst tid = async_hooks.triggerAsyncId();\n\n// 创建一个新的 AsyncHook 实例。\nconst asyncHook =         // 这些回调函数参数都是可选的。\n    async_hooks.createHook({\n        init, before, after,\n        destroy, promiseResolve,\n});\n\n// 允许该 AsyncHook 实例的回调函数被调用。\n// 此方法不会在实例创建时被隐式调用。\n// 为了调用异步钩子回调函数，你必须显式调用此方法。\nasyncHook.enable();\n\n// 禁用对新的异步事件的监听。\nasyncHook.disable();\n\n//\n// 下面是可以被传入 createHook() 的回调函数。\n//\n\n// init 钩子在对象创建过程中被调用。\n// 当此钩子被调用时对象可能没有创建完成。\n// 因此，所有被 `asyncId` 引用的字段\n// 可能没有被填充。\nfunction init(\n    asyncId, type, triggerAsyncId, resource\n) { }\n\n// before 钩子是在对象的回调函数被调用之前调用的。\n// 对于句柄(handle)(例如 TCPWrap)，此钩子可以被调用任意次数；\n// 对于请求(request)(例如 FSReqCallback)，则只会被调用一次。\nfunction before(asyncId) { }\n\n// after 钩子会在对象的回调函数完成之后调用。\nfunction after(asyncId) { }\n\n// destroy 钩子会在对象被销毁时调用。\nfunction destroy(asyncId) { }\n\n\n// promiseResolve 钩子只对 promise resourse 生效。\n// 当被传入 promise 构造器的 resolve() 函数被调用时\n// (被直接调用或其它 resolve 一个 promise 的途径)，\n// 此钩子会被调用。\nfunction promiseResolve(asyncId) { }"}]}]}